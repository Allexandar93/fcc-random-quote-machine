{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","quotes","setQuotes","randomQuote","setRandomQuote","React","useEffect","a","fetch","response","json","data","randIndex","Math","floor","random","length","fetchData","className","id","text","author","href","encodeURIComponent","target","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OA8DeA,MAzDf,WACE,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KA0BA,OAvBAC,IAAMC,WAAU,WAAM,4CACpB,gCAAAC,EAAA,sEACwBC,MAAM,+BAD9B,cACQC,EADR,gBAEqBA,EAASC,OAF9B,OAEQC,EAFR,OAIET,EAAUS,GACNC,EAAYC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAKK,QAChDZ,EAAeO,EAAKC,IANtB,4CADoB,uBAAC,WAAD,wBASpBK,KAGC,IAYD,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SAEE,sBAAKC,GAAG,YAAR,UAEE,mBAAGA,GAAG,OAAN,SAAehB,EAAYiB,OAG3B,oBAAGD,GAAG,SAAN,eAAmBhB,EAAYkB,UAE/B,sBAAKH,UAAU,UAAf,UACA,oBAAGC,GAAG,cAAcG,KAAM,8EAC9BC,mBAAmB,IAAMpB,EAAYiB,KAAO,KAAOjB,EAAYkB,QAASG,OAAO,SAD3E,UACoF,mBAAGN,UAAU,kBADjG,iBAKA,wBAAQC,GAAG,YAAaM,QA1BZ,WAClB,IAAIb,EAAYC,KAAKC,MAAMD,KAAKE,SAAWd,EAAOe,QAChDZ,EAAeH,EAAOW,KAwBlB,sCCtCKc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6d031c6b.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.scss';\n\n\n\nfunction App() {\n  const [quotes, setQuotes] = useState([])\n  const [randomQuote, setRandomQuote] = useState([])\n  \n\n  React.useEffect(() => {\n    async function fetchData() {\n      const response =await fetch(\"https://type.fit/api/quotes\")\n      const data = await response.json();\n\n      setQuotes(data)\n      let randIndex = Math.floor(Math.random() * data.length)\n      setRandomQuote(data[randIndex])\n    }\n    fetchData();\n    \n    \n  }, [])\n\n  const getNewQuote = () => {\n    let randIndex = Math.floor(Math.random() * quotes.length)\n      setRandomQuote(quotes[randIndex])\n      \n\n  }\n  \n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\"  > \n\n        <div id=\"quote-box\">\n          \n          <p id=\"text\" >{randomQuote.text}</p>\n\n\n          <p id=\"author\" >- {randomQuote.author}</p>\n          \n          <div className=\"buttons\">\n          <a id=\"tweet-quote\" href={'https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=' +\n      encodeURIComponent('\"' + randomQuote.text + '\" ' + randomQuote.author)} target=\"_blank\"><i className=\"fa fa-twitter\"></i>Tweet this!</a>\n      \n\n\n          <button id=\"new-quote\"  onClick={getNewQuote}>Get new quote</button>\n\n          </div>\n          \n\n        </div>\n        \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}